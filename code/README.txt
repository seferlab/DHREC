Before running DHREC,DHRECi,DHRECir,DHRECR
1- Diffusion data is available in plain text format(You can create
data from our diffusion data generator for SEIR diffusion models and
undersampled/noisy cases)

A- Adding Diffusion Information to Graph

All methods assume diffusion information for each edge or node is
provided with the graph. To embed diffusion information to graph,

python graphgen.py graphgen.config

graphgen.config is composed of following parameters with default values in
paranthesis

graphfilename: graph to add parameters(graph.gml)
graphfolder: parameter added graph folder(outfolder)
smodel: spreading model(si)
dist: continuous(cont) or discrete distribution(dis)
outformat: format of parameter added graph(pickle)
s2i dist: s2i distribution distribution
s2i start: s2i distribution left boundary of parameters
s2i end: s2i distribution right boundary of parameters
i2r dist: ...
i2r start: ...
i2r end: ...
sprob start: spread probability left boundary of parameters
sprob end: spread probability right boundary of parameters


B- Trace Generation:

a- Trace Info:

DHREC assumes traces are stored in plain text format. When data is perfect, it is simply,

node1 state time 
node2 state time 
...

When diffusion data is noisy,

node time state probability
...


b- Generating Traces

In order to generate traces, run as following

python tracegen.py trace.config

trace.config file has the following parameters with default values in
paranthesis

traceoutfolder: trace output folder(gentraces)
graphfilename: graph file (graph.gml)
tracecount: number of traces(10)
samplerate: sampling rate(0)
startnodecount: number of start nodes(1)
noise: noise rate(0.0)
smodel: spreading model(si)
dist: continous(cont) or discrete distribution(dis)


C- History Inference

Snapshot File Format (trial.snapshot is an example):




History inference can be done for 2 cases, each 2 methods with
different methods.

Run as following:
python HistoryInfer.py history.config

history.config is configuration file. It includes the following
parameters with default values in paranthesis

resultfilename: trialresults.hist 
tracefile: traces_real_static_si_edge_dis/dis-si-s2i_expo_0.5_0.5_sprob_1.0_1.0-rds.pickle/0.0-0/1/0.plain
snapshotfile: trial.snapshot
iter: None
algo: GreedySubCoverSingle
objmethod: log 
ensemble: False
enscount: 5
roundmethod: random
smodel: si
infermode: Spreader
dist: dis
noise: 0.0
noisetype: StateChange
inter: None
graphfile: trial.edgelist
printscore: KenTau
scorestates: i
scoretimes: None

Here is more detailed explanation of the parameters:

algo:
      "Qsapmin": Quadratic Semi Assignment 
      "Qsapmax": Quadratic Semi Assignment 
      "MatroidSub": Submodular optimization under matroid
      "Pcvc": Prize collecting vertex cover
      "Pcdsvc": Prize collecting dominating set vertex cover
      "MinCut": Min cut
      "Independent": Independent baseline heuristic
      "GreedyForward": Baseline heuristic
      "GreedySubCoverSingle": 

infermode: History / Spreader

ensemble: True: ensemble mode on 
                 False: ensemble mode off

enscount: number of ensemble runs

printscore: Score to be estimated
                  None if score estimation is not required.







D- Plot Generator:

All plots in the paper can be generated as follows by running python historyplotgen.py

E- Further info:
- Diffusion history reconstruction returns inferred history as plain
text
- It plots the estimated diffusion progression
- Parameter addition can be done via graphgen.py associated with this package
- Tracefiles can be generated by tracegen.py code associated with this package

If you use this code, please cite our following paper.


