function Rlog = rumor_centrality_all_tree(a,outfile)%function Rlog = rumor_centrality_all_tree(a)%a = adj matrix of graph %calculate Log(RC) of all nodes of graph%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%N = length(a);Rlog = zeros(N,1);for jj = 1:N    %tic    root = jj;    pred = zeros(N,1);    trees = ones(N,1);    pred(root) = -1;    q = zeros(N,1);    head = 1; tail = 1;    q(tail)=root; tail = tail + 1;    while head < tail        u = q(head); head = head + 1;        col = a(:,u);        kids = find(col);        for j=1:length(kids)            v = kids(j);            if pred(v)==0                pred(v) = u;                q(tail)=v;                tail = tail+1;            end        end    end    %toc    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    %display('Tree made')    %tic    for q_ind = 0:N-2        vq = q(N-q_ind);        q_pred = pred(vq);  %start at bottom of q, and q_pred is                                  %predecessor of q(q_ind)        trees(q_pred) = trees(q_pred)+trees(vq);           end        if N>10  %use Stirling approx for log N!        z = (N)*log((N)/exp(1))+1/2*log(2*pi*(N));    else        z = log(factorial(N));    end    Rlog(jj) = z-sum(log(trees));    %toc    %print every 100 nodes for sanity's sake    if mod(jj,1000)==0        fprintf('%d th node\n',jj);    end    endsave(outfile, 'Rlog')